name: Build & Deploy Docs

on:
  push:
    branches: [ main ]
  workflow_dispatch:

# 官方 Pages 动作需要这些权限
permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: npm

      # 1) 在 CI 里临时创建 Docusaurus 项目（不写入 main）
      - name: Scaffold Docusaurus
        run: |
          npx --yes create-docusaurus@latest site classic --skip-install
          cd site
          npm ci

      # 2) 把 main 根目录下的 .md / .mdx 以及常见静态资源复制到 site/docs
      #    - 你根目录就是文档，没有 docs/ 子目录
      #    - 会保留子目录结构
      - name: Copy docs from repository root into site/docs
        run: |
          rm -rf site/docs
          mkdir -p site/docs
          # 复制 Markdown
          rsync -av --prune-empty-dirs \
            --include='*/' \
            --include='*.md' --include='*.MD' --include='*.mdx' \
            --exclude='*' ./ site/docs/
          # 复制文档内引用到的常见资源到相同结构（放同级即可被引用）
          rsync -av --prune-empty-dirs \
            --include='*/' \
            --include='*.png' --include='*.jpg' --include='*.jpeg' --include='*.gif' --include='*.svg' \
            --include='*.pdf' --include='*.mp4' --include='*.webm' \
            --exclude='*' ./ site/docs/

      # 3) 生成最小化配置：从环境变量自动推断 url/baseUrl
      - name: Write docusaurus.config.js for Pages
        run: |
          REPO="${GITHUB_REPOSITORY#*/}"
          OWNER="${GITHUB_REPOSITORY_OWNER}"
          cat > site/docusaurus.config.js <<'EOF'
          // minimal docusaurus config for CI-only builds
          import {themes as prismThemes} from 'prism-react-renderer';
          export default {
            title: 'Docs',
            favicon: 'img/favicon.ico',
            url: 'https://GITHUB_OWNER.github.io',
            baseUrl: '/GITHUB_REPO/',
            organizationName: 'GITHUB_OWNER',
            projectName: 'GITHUB_REPO',
            trailingSlash: false,
            i18n: { defaultLocale: 'en', locales: ['en'] },
            presets: [
              ['@docusaurus/preset-classic',
                { docs: { sidebarPath: undefined }, blog: false, pages: false }
              ]
            ],
            themeConfig: {
              prism: { theme: prismThemes.github, darkTheme: prismThemes.dracula }
            }
          }
          EOF
          sed -i "s/GITHUB_OWNER/$OWNER/g" site/docusaurus.config.js
          sed -i "s/GITHUB_REPO/$REPO/g"  site/docusaurus.config.js

      # 4) 侧边栏使用“自动根据文件夹生成”，无需手写 sidebars.js
      - name: Force autogenerated sidebar
        run: |
          cat > site/sidebars.js <<'EOF'
          /** @type {import('@docusaurus/plugin-content-docs').SidebarsConfig} */
          const sidebars = {
            tutorialSidebar: [{type: 'autogenerated', dirName: '.'}],
          };
          export default sidebars;
          EOF

      # 5) 构建
      - name: Build
        run: |
          cd site
          npm run build

      # 6) 上传静态产物给 Pages
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site/build

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
